name: Dependabot
on:
  workflow_call:
permissions:
  contents: write
  pull-requests: write 

jobs:
  Run:
    runs-on: ubuntu-latest
    if: >
      github.ref_name == 'master'
    steps:
      # Setup
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # Configure Git
      - name: Git configuration
        uses: michijs/.github/.github/actions/set-git-config-github-actions@main

      - name: Set up environment
        uses: michijs/.github/.github/actions/setup@main
        
      - name: Get previous package.json state
        id: previous-state
        run: echo "old_json=$(jq -c . package.json)" >> $GITHUB_OUTPUT

      - name: Detect updated packages (non-destructive)
        run: |
          RAW_UPDATED=$(bunx npm-check-updates --jsonUpgraded)

          # Save raw JSON safely
          echo "raw_json<<EOF" >> $GITHUB_OUTPUT
          echo "$RAW_UPDATED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Generate flat list for bash and GitHub ENV
          UPDATED_PACKAGES=$(echo "$RAW_UPDATED" | jq -r 'to_entries[] | "\(.key)@\(.value)"' | tr '\n' ' ')
          echo "UPDATED_PACKAGES=$UPDATED_PACKAGES" >> $GITHUB_ENV

      - name: Update dependencies
        run: bunx npm-check-updates -u

      - name: Check for changes
        run: |
          if git diff-index --quiet HEAD --; then
            echo "No changes detected. Skipping next steps."
          else
            echo "Changes detected. Proceeding with next steps."
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          fi

      - name: Close old PR
        continue-on-error: true
        run: 
          gh pr close michijs-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new branch
        if: env.CHANGES_DETECTED == 'true'
        run: git checkout -B michijs-dependabot

      - name: Commit changes
        if: env.CHANGES_DETECTED == 'true'
        uses: michijs/.github/.github/actions/commit-if-changes@main
        with:
          message: "Michijs Dependabot changes"

      - name: push changes
        if: env.CHANGES_DETECTED == 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: michijs-dependabot
          force: true

      - name: Create new PR
        if: env.CHANGES_DETECTED == 'true'
        run: |
          # Initialize output
          OUTPUT="## Updated Packages
          
          "

          # Get current package.json contents
          CURRENT_JSON=$(cat package.json)
          OLD_JSON='${{ steps.previous-state.outputs.old_json }}'

          # Convert space-separated list to array
          IFS=' ' read -ra PKGS <<< "$UPDATED_PACKAGES"

          for pkg in "${PKGS[@]}"; do
            COMMIT_HISTORY=""
            PKG_NAME="${pkg%@*}"
            NEW_VERSION="${pkg##*@}"

            url=$(bunx npm view "$PKG_NAME" repository.url)
            directory=$(bunx --silent npm view "$PKG_NAME" repository.directory)
            clean_url=${url#git+}
            clean_url=${clean_url%.git}

            owner=$(echo "$clean_url" | cut -d'/' -f4)
            repo=$(echo "$clean_url" | cut -d'/' -f5)

            # Get previous version
            OLD_VERSION=$(echo "$OLD_JSON" | jq -r --arg pkg "$PKG_NAME" '(.dependencies[$pkg] // .devDependencies[$pkg]) // "Not found"')

            # Get changelog
            if [ -z "$directory" ]; then
              CHANGELOG=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${owner}/${repo}/releases --jq '.[] | "\n### "+(.tag_name)+"\n\n"+(.body)+"\n\n"' || true)
            fi
            FINAL_CHANGELOG=""
            if [ -n "$CHANGELOG" ]; then
              FINAL_CHANGELOG="<details>
                <summary>Changelog:</summary>
                <em>Sourced from <a href="https://github.com/${owner}/${repo}/releases">releases</a>.</em>${CHANGELOG}</details>"
            fi

            # Get commit history
            COMMIT_HISTORY=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${owner}/${repo}/commits --jq '.[] | "<li><a href="+.commit.url+"><code>+"+.sha[0:6]+"</code></a> "+.commit.message+"</li>"')

            OUTPUT+="
            <details><summary><h3>${PKG_NAME} - ${OLD_VERSION:-Not found} to ${NEW_VERSION}</h3></summary>${FINAL_CHANGELOG}<details><summary>Commit history:</summary><ul>${COMMIT_HISTORY}</ul></details>
            </details>
            "
          done

          gh pr create -B master -H michijs-dependabot --title '[master] Michijs Dependabot changes' --body "${OUTPUT}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}