name: Dependabot
on:
  workflow_call:
permissions:
  contents: write
  pull-requests: write 

jobs:
  Run:
    runs-on: ubuntu-latest
    if: >
      github.ref_name == 'master'
    steps:
      # Setup
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure Git
      - name: Git configuration
        uses: michijs/.github/.github/actions/set-git-config-github-actions@main

      - name: Set up environment
        uses: michijs/.github/.github/actions/setup@main
        
      - name: Get previous package.json state
        id: previous-state
        run: echo "old_json=$(jq -c . package.json)" >> $GITHUB_OUTPUT

      - name: Detect updated packages (non-destructive)
        run: echo "UPDATED_PACKAGES=$(bunx npm-check-updates --jsonUpgraded --packageFile package.json | jq -c .)" >> $GITHUB_ENV

      - name: Update dependencies
        run: bunx npm-check-updates -u

      - name: Check for changes
        run: |
          if git diff-index --quiet HEAD --; then
            echo "No changes detected. Skipping next steps."
          else
            echo "Changes detected. Proceeding with next steps."
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
          fi

      - name: Close old PR
        continue-on-error: true
        run: 
          gh pr close michijs-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new branch
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        run: git checkout -B michijs-dependabot

      - name: Commit changes
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        uses: michijs/.github/.github/actions/commit-if-changes@main
        with:
          message: "Michijs Dependabot changes"

      - name: push changes
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: michijs-dependabot
          force: true

      - name: Create new PR
        if: ${{ env.CHANGES_DETECTED == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            let output = "## Updated Packages\n\n";

            const updatedPackages = JSON.parse(process.env.UPDATED_PACKAGES);
            const oldJson = JSON.parse(process.env.OLD_JSON || '${{ steps.previous-state.outputs.old_json }}');
            const comments = [];

            for( const [pkgName, newVersion] of Object.entries(updatedPackages)){
              console.log({pkgName, newVersion})
              const url = execSync(`bunx npm view "${pkgName}" repository.url`, { encoding: 'utf-8' }).trim();
              const directory = execSync(`bunx --silent npm view "${pkgName}" repository.directory`, { encoding: 'utf-8' }).trim();
              
              let cleanUrl = url.replace(/^git\+/, '').replace(/\.git$/, '');
              const [, , , owner, repo] = cleanUrl.split('/');
              
              const oldVersion =
                oldJson.dependencies?.[pkgName] ||
                oldJson.devDependencies?.[pkgName] ||
                'Not found';
              const bumpLabel = `Bump ${pkgName} from ${oldVersion} to ${newVersion}`;

              output += `<li>${bumpLabel}</li>`;
              
              let finalChangelog = '';
              if (!directory) {
                try {
                  const releases = await github.rest.repos.listReleases({
                    owner,
                    repo,
                  });
                  if (releases.data.length) {
                    const changelog = releases.data
                      .map(r => `\n### ${r.tag_name}\n\n${r.body}\n\n`)
                      .join('');
                    finalChangelog = `<details>
                      <summary>Changelog:</summary>
                      <blockquote><em>Sourced from <a href="https://github.com/${owner}/${repo}/releases">releases</a>.</em>${changelog}</blockquote></details>`;
                  }
                } catch (err) {
                  console.log(`No changelog for ${pkgName}:`, err.message);
                }
              }
              
              let commitHistory = '';
              try {
                const commits = await github.rest.repos.listCommits({
                  owner,
                  repo,
                  per_page: 10,
                });
                commitHistory = commits.data
                  .map(c => `<li><a href="${c.html_url}"><code>${c.sha.slice(0,6)}</code></a> ${c.commit.message}</li>`)
                  .join('');
              } catch (err) {
                console.log(`No commit history for ${pkgName}:`, err.message);
              }

              
              comments.push(`<h3>${bumpLabel}</h3>${finalChangelog}<details><summary>Commit history:</summary><ul>${commitHistory}</ul></details>`);
            }

            const res = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[master] Michijs Dependabot changes',
              head: 'michijs-dependabot',
              base: 'master',
              body: output,
            });

            await Promise.all(comments.map(async comment => await github.rest.issues.createComment({
              issue_number: res.data.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })))
            