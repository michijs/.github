name: Release package
on:
  workflow_call:
    inputs:
      release-type:
        description: "Release type"
        required: true
        type: string
        # type: choice
        # options:
        #   - major
        #   - minor
        #   - patch
        #   - premajor
        #   - preminor
        #   - prepatch
        #   - prerelease
      release-notes:
        description: "Release notes"
        type: string
      dist-script:
        description: "Distribution script to execute"
        type: string
        default: "dist"
      visibility:
        description: "Package visibility"
        type: string
        default: "public"
permissions:
  id-token: write
  contents: write
  packages: write

env:
  RELEASE_TYPE: ${{ github.event.inputs.release-type }}

jobs:
  Release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Set up environment
        uses: michijs/.github/.github/actions/setup@main

      - name: Install dependencies
        uses: michijs/.github/.github/actions/install@main

      # Configure Git
      - name: Git configuration
        uses: michijs/.github/.github/actions/set-git-config-github-actions@main

      # Bump package version
      # Use tag latest
      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          echo "NEW_VERSION=$(bunx npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV

      # Bump package pre-release version
      # Use tag beta for pre-release versions
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          echo "NEW_VERSION=$(bunx npm --no-git-tag-version --preid=beta version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV

      - name: Build
        uses: michijs/.github/.github/actions/run@main
        with: 
          command: ${{ inputs.dist-script }}

      # Commit changes
      - name: Commit package.json changes and create tag
        run: |
          git add "package.json"
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      # Push repository changes
      - name: Push changes
        uses: michijs/.github/.github/actions/pull-and-push@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true

      # Update GitHub release with changelog
      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ github.event.inputs.release-notes }}
          prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}

        # If public publish to npm
        # Setup Node.js environment
      - name: Set up Node.js 20.9.0 with registry.npmjs.org
        if: inputs.visibility == "public"
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
          # Important!
          registry-url: https://registry.npmjs.org
          always-auth: true

      - name: Publish to registry.npmjs.org
        if: inputs.visibility == "public"
        run: |
          npm publish --provenance --access ${{ inputs.visibility }} --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

        # If private or public publish to github packages
        # Setup Node.js environment
      - name: Set up Node.js 20.9.0 with npm.pkg.github.com
        uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
          # Important!
          registry-url: https://npm.pkg.github.com
          always-auth: true

      - name: Publish to npm.pkg.github.com
        run: |
          if [[ "${{ inputs.visibility }}" = "public" ]]; then
            npm publish --provenance --access ${{ inputs.visibility }} --tag ${{ env.RELEASE_TAG }}
          else
            npm publish --access ${{ inputs.visibility }} --tag ${{ env.RELEASE_TAG }}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}