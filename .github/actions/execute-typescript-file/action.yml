name: "Execute typescript file"
description: "Execute typescript file in the selected repository"
inputs:
  params:
    description: "Params"
    required: false
    default: "{}"
  script:
    description: "Script to execute"
    required: true

runs:
  using: "composite"
  steps:
    - name: Execute TS file
      uses: michijs/.github/.github/actions/tsscript@main
      with:
        script: |
          import { write } from "bun";
          async function importScriptFromUrl(url) {
            const fileName = url.split("/").at(-1);
            // Fetch the script
            const res = await fetch(url);
            if (!res.ok) throw new Error(`${url} does not exist (status: ${res.status})`);
            // Write to file
            await write(`/tmp/${fileName}`, await res.blob());
            const { default: script } = await import(`file:///tmp/${fileName}`);
            return (params) => script({ params, github, runGroup });
          }
          const github = ${{ toJson(github) }};
          const script = await importScriptFromUrl("${{ inputs.script }}");
          async function runGroup(name, callback) {
            const consoleCalls = [];
            const originalConsoleLog = console.log
            try {
              console.log = (...args) => consoleCalls.push(args);
              const result = await callback();
              console.log = originalConsoleLog;
              console.log(`::group::✅ ${name}`);
              consoleCalls.forEach(console.log);
              console.log(`::endgroup::`);
              return result;
            } catch (err) {
              console.log = originalConsoleLog;
              console.log(`::group::⛔ ${name}`);
              consoleCalls.forEach(console.log);
              console.log(`::error::${err}`);
              console.log(`::endgroup::`);
              throw err;
            }
          }
          await script(${{ inputs.params }});
